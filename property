from typing import List
from datetime import date
from lease import Lease
from expense import Expense
from revenue import calculate_total_rent

class Lease:
    def __init__(self, tenant_name, lease_start_date, lease_end_date, lease_type, annual_rent, rent_per_square_foot, annual_rent_increase, tenant_improvement_allowance, leasing_commissions):
        self.tenant_name = tenant_name
        self.lease_start_date = lease_start_date
        self.lease_end_date = lease_end_date
        self.lease_type = lease_type
        self.annual_rent = annual_rent
        self.rent_per_square_foot = rent_per_square_foot
        self.annual_rent_increase = annual_rent_increase
        self.tenant_improvement_allowance = tenant_improvement_allowance
        self.leasing_commissions = leasing_commissions

    def calculate_remaining_lease_term(self):
        today = date.today()
        if self.lease_end_date < today:
            return 0
        return (self.lease_end_date - today).days

    def calculate_rent_over_remaining_lease_term(self):
        remaining_lease_term = self.calculate_remaining_lease_term()
        rent = self.annual_rent
        total_rent = 0
        for _ in range(remaining_lease_term // 365):
            total_rent += rent
            rent *= (1 + self.annual_rent_increase)
        return total_rent

class Expense:
    def __init__(self, expense_type, expense_amount, expense_frequency, expense_growth_rate):
        self.expense_type = expense_type
        self.expense_amount = expense_amount
        self.expense_frequency = expense_frequency
        self.expense_growth_rate = expense_growth_rate

    def calculate_annual_expense(self):
        if self.expense_frequency == 'monthly':
            return self.expense_amount * 12
        elif self.expense_frequency == 'yearly':
            return self.expense_amount
        else:
            raise ValueError("Invalid expense frequency")


class Property:
    def __init__(self, property_id, property_name, property_type, address, location, year_built, lot_size, zoning, gross_leasable_area, number_of_units, number_of_floors, parking_spaces, parking_ratio, property_condition, acquisition_date, acquisition_price, current_market_value, appraisal_value, cap_rate_history, occupancy_rate, discount_rate):
        self.property_id = property_id
        self.property_name = property_name
        self.property_type = property_type
        self.address = address
        self.location = location
        self.year_built = year_built
        self.lot_size = lot_size
        self.zoning = zoning
        self.gross_leasable_area = gross_leasable_area
        self.number_of_units = number_of_units
        self.number_of_floors = number_of_floors
        self.parking_spaces = parking_spaces
        self.parking_ratio = parking_ratio
        self.property_condition = property_condition
        self.acquisition_date = acquisition_date
        self.acquisition_price = acquisition_price
        self.current_market_value = current_market_value
        self.appraisal_value = appraisal_value
        self.cap_rate_history = cap_rate_history
        self.occupancy_rate = occupancy_rate
        self.discount_rate = discount_rate
        self.leases: List[Lease] = []
        self.expenses: List[Expense] = []

    def add_lease(self, lease: Lease):
        self.leases.append(lease)

    def remove_lease(self, lease: Lease):
        self.leases.remove(lease)

    def add_expense(self, expense: Expense):
        self.expenses.append(expense)

    def remove_expense(self, expense: Expense):
        self.expenses.remove(expense)

    def calculate_net_operating_income(self):
        total_rent = sum(lease.calculate_rent_over_remaining_lease_term() for lease in self.leases)
        total_expenses = sum(expense.calculate_annual_expense() for expense in self.expenses)
        return total_rent - total_expenses

    def calculate_cash_flow(self):
        # This is a simple implementation. You might need to adjust it to match your exact cash flow calculation requirements.
        net_operating_income = self.calculate_net_operating_income()
        loan_payment = 0  # Replace this with the actual loan payment calculation
        return net_operating_income - loan_payment

    def calculate_internal_rate_of_return(self):
        # This method requires more information, such as the investment amount and cash flows for each period.
        pass

    def calculate_net_present_value(self):
        # This method requires more information, such as the investment amount, cash flows for each period, and the discount rate.
        pass

    def calculate_debt_service_coverage_ratio(self):
        net_operating_income = self.calculate_net_operating_income()
        debt_service = 0  # Replace this with the actual debt service calculation
        return net_operating_income / debt_service if debt_service != 0 else None

    def calculate_loan_to_value_ratio(self):
        loan_amount = 0  # Replace this with the actual loan amount
        return loan_amount / self.current_market_value

    def perform_sensitivity_analysis(self):
        # This method requires more information, such as which variables to analyze and the range of possible values.
        pass

    def generate_financial_report(self):
        # This method should generate a comprehensive financial report, which may involve formatting and exporting the data to a file or displaying it in a user interface.
        pass