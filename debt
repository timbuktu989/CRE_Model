import math
from enum import Enum
from typing import List


class LoanType(Enum):
    FIXED_RATE = "Fixed Rate"
    ADJUSTABLE_RATE = "Adjustable Rate"
    INTEREST_ONLY = "Interest Only"
    BALLOON = "Balloon"
    # Add more loan types as needed


class Loan:
    def __init__(self, loan_type: LoanType, principal: float, interest_rate: float, term_in_years: int, amortization_period: int, initial_interest_only_period: int = 0, rate_adjustment_schedule=None, balloon_payment: float = 0.0):
        self.loan_type = loan_type
        self.principal = principal
        self.interest_rate = interest_rate
        self.term_in_years = term_in_years
        self.amortization_period = amortization_period
        self.initial_interest_only_period = initial_interest_only_period
        self.rate_adjustment_schedule = rate_adjustment_schedule if rate_adjustment_schedule else {}
        self.balloon_payment = balloon_payment

    def calculate_monthly_payment(self, number_of_payments_made: int = 0):
        if self.loan_type == LoanType.INTEREST_ONLY and number_of_payments_made < self.initial_interest_only_period * 12:
            return self.principal * (self.interest_rate / 12)

        monthly_interest_rate = self.interest_rate / 12
        number_of_payments = self.amortization_period * 12

        if self.loan_type == LoanType.ADJUSTABLE_RATE:
            # Update the interest rate based on the number of payments made and the rate_adjustment_schedule
            for payments, adjustment in self.rate_adjustment_schedule.items():
                if number_of_payments_made >= payments:
                    monthly_interest_rate = (self.interest_rate + adjustment) / 12

        numerator = monthly_interest_rate * (1 + monthly_interest_rate) ** number_of_payments
        denominator = (1 + monthly_interest_rate) ** number_of_payments - 1
        monthly_payment = self.principal * (numerator / denominator)

        if self.loan_type == LoanType.BALLOON and number_of_payments_made >= self.term_in_years * 12:
            monthly_payment += self.balloon_payment

        return monthly_payment

    def calculate_outstanding_balance(self, number_of_payments_made: int):
        if self.loan_type == LoanType.BALLOON and number_of_payments_made >= self.term_in_years * 12:
            return 0

        monthly_payment = self.calculate_monthly_payment(number_of_payments_made)
        monthly_interest_rate = self.interest_rate / 12

        if self.loan_type == LoanType.ADJUSTABLE_RATE:
            for payments, adjustment in self.rate_adjustment_schedule.items():
                if number_of_payments_made >= payments:
                    monthly_interest_rate = (self.interest_rate + adjustment) / 12

        number_of_total_payments = self.amortization_period * 12

        numerator = ((1 + monthly_interest_rate) ** number_of_payments_made - 1) * monthly_payment
        denominator = monthly_interest_rate * ((1 + monthly_interest_rate) ** number_of_total_payments - 1)
        outstanding_balance = self.principal - (numerator / denominator)
        return outstanding_balance


class LoanPortfolio:
    def __init__(self, loans: List[Loan]):
        self.loans = loans

    def calculate_total_monthly_payment(self, number_of_payments_made: int = 0):
        return sum(loan.calculate_monthly_payment(number_of_payments_made) for loan in self.loans)

    def calculate_total_outstanding_balance(self, number_of_payments_made: int):
        return sum(loan.calculate_outstanding_balance(number_of_payments_made) for loan in self.loans)

